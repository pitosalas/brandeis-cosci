==== DATABASES ====

  * A way to manage large amounts of data. Persistence. Standard access.
  * Different vendors, different features. standardization is hard. 
  * Stored on disk (or in memory, or elsewhere)
  * Tables containing records (or objects, or other things)
  * Examples: SQL Databases, DNS database, Hierarchical file system, etc. etc.

==== SQL Databases ====

 * Most common still. "Relational" database
 * SQL is a simple programming/command language. Let's look at some examples.
 * Oddly you don't actually use it that much. Too many dialects.
 * All SQL databases are table-oriented. What makes a SQL database a SQL database?
 * Database has multiple tables. A table has multiple columns.
 * Data Types.
 * Access Control
 * Administration
 * Simplistic way to look at operations: Create, Retrieve, Update, Delete
 
==== INTERACTIVE DEMO ====

 * Use SQL command line
 * Use GUI

==== JOIN ====

 * Family of operations to allow tables to be combined
 * 3d Normal form
 * Avoiding duplication
  
==== EXAMPLE ====

 * Something from one of the projects
 * How would that be mapped into a relational table?

==== OR MAPPING ====

 * How does a relational table get accessed in an OO language?
 * Pros and Cons
 * Introducing: Object / Relational Mapping
 * Goal: to be able to access relational tables *as if* they are classes and objects
 * It's an abstraction
 * Below the surface, they are still actual relational tables
 * Above the surface they function much like standard classes

==== ActiveRecord ====

 * Part of Rails that does OR Mapping
 * Automatically defines methods on classes based on the underlying database
 * DB Migration: what happens when the database changes?
 * Demo: Example from my app ElectionManager
 * Demo: Example from Book