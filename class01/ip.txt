==== IP/PROTOCOLS/ETC ====

 * Review for some, new for others. Basics. Need to understand this if you want to be successful debugging Rails and Android apps.

 * IP: "internetwork" protocol
 * Gets  data between one 'host' (=computer or server) and another
 * Like the boxes, we need an address from and to: "IP address!" 123.22.112.1 

 * what's a protocol? protocols are always layered, one on top of the other
 * lower level protocols are 'closer to the hardware', higher level protocols are 'closer to the user'
 * question: could you call .mp3 or .jpg a protocol??

 * Decentralized 'distribution' of a key. I set up a new computer, where's the IP address come from?
 * Problem: I want to have a unique key that is guaranteed to be unique
 * But, I don't want to have to go to a central authority to get the key
 * Discussion: By the way, why not? Other examples of this principle? How might this work?

 * We don't want 'people' to remember 12.31.2.123. Why? Any regular life examples of this?
 * Solution: Indirection. But now we need a directory. Why?
 * DNS: distributed name service

{{{$ dig <url>
$ dig -x <url>
$ http://map-o-net.com/
$ http://icicle.dylex.net/~ipmap/}}}

 * So the IP address is for 1 specific 'host' or server (as usual there are exceptions :)
 * IP is the way servers talk 'to each other' to get a packet of  bits between them
 * Conceptually, 'send these bits to this ip address'
 * Problems: your client isn't attached to my server by a wire
 * So who is that message sent to?

 * Packet switching, Contrast with POTS Was a big deal when first invented.
 * There was a 'connection' literally between my phone and yours
 * Packet switching breaks message into pieces and sends them all on their way
 * Each one finds its own way to the target
 * Other components of the network? Routers

{{{
$ TraceRoute }}}

==== CORE WEB ARCHITECTURE ====

 * Discussion. How does it all work?
 * Client's ask work to be done; server does it.
 * Web browser is an http 'client'
 * What does that mean?
 * Web server is an http 'server'
 * What does that mean?

==== WEB ARCHITECTURE - CLIENT ====

 * Web client: just a tcp/ip client that makes requests and displays results in a window
 * Default: HTTP protocol, port 80, expects to see html
 * But what other protocols and formats does it support?

==== WEB ARCHITECTURE - SERVER ====

 * Web server: just a tcp/ip server that listens and responds to HTTP requests
