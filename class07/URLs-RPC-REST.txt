REVIEW

* html and http are the core formats/protocols for the web
* remember the http 'methods'. Most common and important: GET and HEAD
* next: POST, PUT, DELETE, but they are rarely used

URLS

* the third core format of the web
* a standard syntax to refer to any resource on the web
* what's a resource? 
* http://www.brandeis.edu. Tease apart the parts
* but what about this one, what's going on here?:     http://www.google.com/search?q=http+verbs&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a
http://www.google.com/ig/api?weather=Arlington+MA (seehttp://blog.programmableweb.com/2010/02/08/googles-secret-weather-api/)

RPC - Remote Procedure Calls

* What's the connection with DNS?
* Imagine a procedure (method) : return_fortune_cookie.
* What would it mean to call it between two computers?
* What would it mean to call it between two computers over the internet?
* How would you approach it?

REST - An different way to think about RPC

* HTTP Verbs: GET (HEAD), PUT, POST, DELETE.
* Think of everything in terms of a 'resource' that is being manipulated
* For example, GET means get a representation of the resource marked, e.g.
   GET http://www.facebook.com/user/pitosalas 
   GET http://www.facebok.com/users
* Some things are harder to fit with the model
* Two advantages: 
-- some rhyme or reason on how to build urls and
-- make logical use of url space
* Different 'representations' possible: html and xml, but others too, say csv or video
* Big one: Standards allow caching in the cloud
* Is http://blog.programmableweb.com/2010/02/08/googles-secret-weather-api/ a REST call?
















