==== The Model ====

 * What is the Domain Model. What does that mean. Are there other models?
 * Where does it exist, in memory or on disk? Or somewhere else? In Rails it's DB independent.
 * Why is it important. Deciding what operations are part of the model and which are not. Not always obvious.
 * Testability. Often the 'easiest' part of a system to test. Put as much smarts there as you can make sense of.
 * Examples: 'Person' in FB, 'Story' in Pivotal, 'Precinct' in ElectionManager
 * Some things are debatable... Is a 'session' a model? Is a model'relational'?
 
==== ACTIVERECORD ====

 * the OR mapping layer in Rail. It Makes db tables appear as objects. Any DB.
 * Column maps to an attribute and vice-versa. When is DB read and written? User controlled.
 * There's some 'impedance matching' needed based on available datatypes
 * ID property corresponds to the DB's primary key
 * What is the underlying database?
 * Leaky abstractions
 * App evolves, needs change. Models are added or changed or deleted. Migrations

{{{
$ rails demome
$ rm public/index
$ cd demome/
$ rm public/index.html 
$ script/generate resource Card name:string telephone:string friend:boolean
$ script generate resource AddressBook name:string
$ script/console
$ rake db:migrate
$ script/console
$ script/generate migration AddAddressBookIdToCard addressbook_id:integer
$ rake db:migrate
$ script/console
}}}
==== Associations ====
 * 'foreign key'. Joins. Association. Another abstraction.
 * :has_many tracks
 * 'meta programming'
 * seems magical at first
 * the thing to understand: it creates methods
 * @thealbum.class => MusicAlbum
 * @thealbum.tracks => a collection of objects of class MusicTrack
 
==== Look at some more complicate examples ====

